<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>威力的學習記錄於此</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://runkids.github.io/"/>
  <updated>2018-01-04T14:56:49.611Z</updated>
  <id>https://runkids.github.io/</id>
  
  <author>
    <name>Willy Hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[筆記][JS30天-Day04] Array Cardio Day1</title>
    <link href="https://runkids.github.io/js30days/2018010401/"/>
    <id>https://runkids.github.io/js30days/2018010401/</id>
    <published>2018-01-04T13:33:55.000Z</published>
    <updated>2018-01-04T14:56:49.611Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：Array方法操作"><a href="#實做：Array方法操作" class="headerlink" title="實做：Array方法操作"></a>實做：Array方法操作</h5><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>Array方法操作：sort , map , filter ,reduce</li><li>Array.from 轉成陣列</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><p>請把程式碼貼到瀏覽器console查看結果</p><hr><p>順道提 console.table( );<br>在Chrome console 下看會變成下圖這樣<br><a href="https://mdn.mozillademos.org/files/8567/console-table-array.png" target="_blank" rel="noopener"><img src="https://mdn.mozillademos.org/files/8567/console-table-array.png" alt=""></a><br>變成表格格式了！Cool ~</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inventors = [</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Albert"</span>, <span class="attr">last</span>: <span class="string">"Einstein"</span>, <span class="attr">year</span>: <span class="number">1879</span>, <span class="attr">passed</span>: <span class="number">1955</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Isaac"</span>, <span class="attr">last</span>: <span class="string">"Newton"</span>, <span class="attr">year</span>: <span class="number">1643</span>, <span class="attr">passed</span>: <span class="number">1727</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Galileo"</span>, <span class="attr">last</span>: <span class="string">"Galilei"</span>, <span class="attr">year</span>: <span class="number">1564</span>, <span class="attr">passed</span>: <span class="number">1642</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Marie"</span>, <span class="attr">last</span>: <span class="string">"Curie"</span>, <span class="attr">year</span>: <span class="number">1867</span>, <span class="attr">passed</span>: <span class="number">1934</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Johannes"</span>, <span class="attr">last</span>: <span class="string">"Kepler"</span>, <span class="attr">year</span>: <span class="number">1571</span>, <span class="attr">passed</span>: <span class="number">1630</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Nicolaus"</span>, <span class="attr">last</span>: <span class="string">"Copernicus"</span>, <span class="attr">year</span>: <span class="number">1473</span>, <span class="attr">passed</span>: <span class="number">1543</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Max"</span>, <span class="attr">last</span>: <span class="string">"Planck"</span>, <span class="attr">year</span>: <span class="number">1858</span>, <span class="attr">passed</span>: <span class="number">1947</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Katherine"</span>, <span class="attr">last</span>: <span class="string">"Blodgett"</span>, <span class="attr">year</span>: <span class="number">1898</span>, <span class="attr">passed</span>: <span class="number">1979</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Ada"</span>, <span class="attr">last</span>: <span class="string">"Lovelace"</span>, <span class="attr">year</span>: <span class="number">1815</span>, <span class="attr">passed</span>: <span class="number">1852</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Sarah E."</span>, <span class="attr">last</span>: <span class="string">"Goode"</span>, <span class="attr">year</span>: <span class="number">1855</span>, <span class="attr">passed</span>: <span class="number">1905</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Lise"</span>, <span class="attr">last</span>: <span class="string">"Meitner"</span>, <span class="attr">year</span>: <span class="number">1878</span>, <span class="attr">passed</span>: <span class="number">1968</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Hanna"</span>, <span class="attr">last</span>: <span class="string">"Hammarström"</span>, <span class="attr">year</span>: <span class="number">1829</span>, <span class="attr">passed</span>: <span class="number">1909</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" title="filter " target="_blank" rel="noopener">filter </a><br>callback function 返回 true 即保留該元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fifteen = inventors.filter(</span><br><span class="line"><span class="comment">//如果出生年份介於1500~1599就保留</span></span><br><span class="line">    inventor =&gt; inventor.year &gt;= <span class="number">1500</span> &amp;&amp; inventor.year &lt; <span class="number">1600</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.table(fifteen);</span><br></pre></td></tr></table></figure></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" title="map" target="_blank" rel="noopener">map</a><br>callback function 處理後返回新陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fullName = inventors.map(</span><br><span class="line">    inventor =&gt; inventor.first + <span class="string">' '</span> + inventor.last</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.table(fullName);</span><br></pre></td></tr></table></figure></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" title="sort" target="_blank" rel="noopener">sort</a><br>預設依照Unicode進行排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">2</span>]; </span><br><span class="line">scores.sort(); </span><br><span class="line"><span class="comment">// [1, 10, 2, 21] ，10 會在 2 之前要特別注意</span></span><br></pre></td></tr></table></figure></li></ul><p>也可以自訂compare function，若a&gt;b 大於0，b會排在a之前<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ordered = inventors.sort( <span class="function">(<span class="params">a, b</span>) =&gt;</span> (a &gt; b) ? <span class="number">1</span> : <span class="number">-1</span> );</span><br><span class="line"><span class="built_in">console</span>.table(ordered);</span><br></pre></td></tr></table></figure></p><p>排序活的年數lol<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inventors.sort( <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.passed - a.year - (b.passed - b.year) );</span><br></pre></td></tr></table></figure></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" title="reduce" target="_blank" rel="noopener">reduce</a><br>由左到右將所有元素做累加，並返回最終值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preVal, lastVal, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preVal + lastVal;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//10</span></span><br></pre></td></tr></table></figure></li></ul><p>後面可以多一個參數當作初始值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preVal, lastVal, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preVal + lastVal;</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//20</span></span><br></pre></td></tr></table></figure></p><p>統計重複的值有幾個<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [<span class="string">'car'</span>, <span class="string">'car'</span>, <span class="string">'truck'</span>, <span class="string">'truck'</span>, <span class="string">'bike'</span>, <span class="string">'walk'</span>, <span class="string">'car'</span>, <span class="string">'van'</span>, <span class="string">'bike'</span>, <span class="string">'walk'</span>, <span class="string">'car'</span>, <span class="string">'van'</span>, <span class="string">'car'</span>, <span class="string">'truck'</span> ];</span><br><span class="line">  <span class="keyword">const</span> reduce = data.reduce( <span class="function">(<span class="params">obj, item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>( !obj[item]  ) &#123; <span class="comment">//若預設物件沒有就新增一個，並給初始為0</span></span><br><span class="line">  obj[item] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  obj[item]++;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;, &#123;&#125;); <span class="comment">//預設給一個空物件</span></span><br><span class="line">  <span class="built_in">console</span>.log(reduce);</span><br></pre></td></tr></table></figure></p><hr><p>最後結合 map 與 filter 在下面網站找出所有含有 de 的字眼<br><a href="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris" title="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aElement = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.mw-category a'</span>))</span><br><span class="line"><span class="keyword">let</span> list = aElement.map(<span class="function"><span class="params">item</span> =&gt;</span> item.textContent)</span><br><span class="line">                   .filter(<span class="function"><span class="params">item</span> =&gt;</span> item.includes(<span class="string">'de'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure><p>因<code>querySelectorAll()</code>不是陣列所以沒有Array方法，可以使用Array.from轉成陣列格式，<br>或者使用ES6<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" title="解構語法" target="_blank" rel="noopener">解構語法</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...document.querySelectorAll(<span class="string">'.mw-category a'</span>)]; <span class="comment">//注意要加上[ ]</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：Array方法操作&quot;&gt;&lt;a href=&quot;#實做：Array方法操作&quot; class=&quot;headerlink&quot; title=&quot;實做：Array方法
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day03] Playing with CSS Variables and JS</title>
    <link href="https://runkids.github.io/js30days/2018010101/"/>
    <id>https://runkids.github.io/js30days/2018010101/</id>
    <published>2018-01-01T09:27:59.000Z</published>
    <updated>2018-01-01T09:57:46.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：使用JS控制CSS來改變圖片效果"><a href="#實做：使用JS控制CSS來改變圖片效果" class="headerlink" title="實做：使用JS控制CSS來改變圖片效果"></a>實做：使用JS控制CSS來改變圖片效果</h5><p><a href="https://goo.gl/SL5qvH" title="Demo" target="_blank" rel="noopener">Demo</a></p><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>建立 CSS 全域變數 :root （IE 和 Edge 目前不支援）</li><li>利用 JS 動態改變 CSS 變數</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><ul><li><p>定義CSS全域變數<br><code>:root{ --變數名稱 : 變數值 }</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用變數<br><code>var( --變數名稱 )</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--base);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用data attribute 定義單位 ex. px ，如果值是顏色就不需要</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"spacing"</span> <span class="attr">min</span>=<span class="string">"10"</span> <span class="attr">max</span>=<span class="string">"200"</span> <span class="attr">value</span>=<span class="string">"10"</span> <span class="attr">data-sizing</span>=<span class="string">"px"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"base"</span> <span class="attr">value</span>=<span class="string">"#ffc600"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 JS 取得 data attribute 值，即我們定義的單位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> suffix = <span class="keyword">this</span>.dataset.sizing || <span class="string">' '</span> ; <span class="comment">//取得自定義屬性data-sizing，若沒有就給空值</span></span><br></pre></td></tr></table></figure></li><li><p>使用 JS 動態改變 CSS 變數值<br>利用 <code>document.documentElement.style.setProperty( &#39;--變數名稱&#39;, &#39;變數值&#39; )</code> 動態改變 CSS，並且加上單位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">`--<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>,<span class="keyword">this</span>.value+suffix);</span><br></pre></td></tr></table></figure></li></ul><h5 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h5><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root" title=":root" target="_blank" rel="noopener">:root</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter" title="CSS濾鏡" target="_blank" rel="noopener">CSS濾鏡</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：使用JS控制CSS來改變圖片效果&quot;&gt;&lt;a href=&quot;#實做：使用JS控制CSS來改變圖片效果&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue實做圖片預覽</title>
    <link href="https://runkids.github.io/vue/2017123101/"/>
    <id>https://runkids.github.io/vue/2017123101/</id>
    <published>2017-12-31T11:01:25.000Z</published>
    <updated>2017-12-31T11:57:31.624Z</updated>
    
    <content type="html"><![CDATA[<h4 id="單圖檔預覽"><a href="#單圖檔預覽" class="headerlink" title="單圖檔預覽"></a>單圖檔預覽</h4><p>HTML：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"fileSelected"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span>  <span class="attr">v-if</span>=<span class="string">"image"</span> <span class="attr">:src</span>=<span class="string">"image"</span> <span class="attr">width</span>=<span class="string">"300"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>這裡我們要顯示一個上傳檔案的按鈕，並且在img tag顯示選擇的圖片</li></ul><p>Javascript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fileSelected(event)&#123;</span><br><span class="line">      <span class="keyword">const</span> file = event.target.files.item(<span class="number">0</span>); <span class="comment">//取得File物件</span></span><br><span class="line">      <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader(); <span class="comment">//建立FileReader 監聽 Load 事件</span></span><br><span class="line">      reader.addEventListener(<span class="string">'load'</span>,<span class="keyword">this</span>.imageLoader);</span><br><span class="line">      reader.readAsDataURL(file);</span><br><span class="line"> &#125;</span><br><span class="line"> imageLoader(event)&#123;</span><br><span class="line">      <span class="keyword">this</span>.image=event.target.result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><ul><li>在Vue實體中，於methods建立fileSelected方法，當檔案按鈕觸發change事件時，會取得file物件</li><li>此時利用FileReader監聽 Load事件，取得圖檔被轉成Base64格式的URL</li><li>再把URL 綁到 img 的src 即可</li></ul><p><a href="https://codepen.io/runkids/pen/opWawW" title="單檔預覽Demo" target="_blank" rel="noopener">單檔預覽Demo</a></p><hr><h4 id="多圖檔預覽"><a href="#多圖檔預覽" class="headerlink" title="多圖檔預覽"></a>多圖檔預覽</h4><p>HTML：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"fileSelected"</span> <span class="attr">multiple</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"image.src"</span> <span class="attr">:height</span>=<span class="string">"image.height"</span> <span class="attr">v-for</span>=<span class="string">"image in images"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>這裡我們要顯示一個上傳檔案的按鈕，並加上multiple</li><li>img Tag 則使用 v-for 的方式呈現</li></ul><p>Javascript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fileSelected(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.images=[];</span><br><span class="line">    <span class="keyword">const</span> files = event.target.files; <span class="comment">//取得File物件</span></span><br><span class="line">    [].forEach.call(files,<span class="keyword">this</span>.fileReader);</span><br><span class="line">&#125;,</span><br><span class="line">fileReader(file) &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader(); <span class="comment">//建立FileReader 監聽 Load 事件</span></span><br><span class="line">    reader.addEventListener(<span class="string">"load"</span>, <span class="keyword">this</span>.createImage);</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">&#125;,</span><br><span class="line">createImage(event) &#123;</span><br><span class="line">    <span class="keyword">const</span> file = event.target;</span><br><span class="line">    <span class="keyword">const</span> image = &#123;</span><br><span class="line">        height : <span class="number">100</span>,</span><br><span class="line">        title : file.name,</span><br><span class="line">        src : file.result</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.images.push(image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>多檔作法其實與單檔相似，利用forEach個別取得圖檔的 Base64 RUL</li><li>createImage 方法會把每一個URL存放到data 中的 images陣列</li></ul><p><a href="https://goo.gl/JkxGke" title="單檔預覽Demo" target="_blank" rel="noopener">多檔預覽Demo</a></p><hr><h4 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readAsDataURL" title="FileReader.readAsDataURL()" target="_blank" rel="noopener">FileReader.readAsDataURL()</a><br><a href="https://runkids.github.io/javascript/2017122801/" title="理解Javascrpit[].forEach.call()">理解Javascrpit[].forEach.call()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;單圖檔預覽&quot;&gt;&lt;a href=&quot;#單圖檔預覽&quot; class=&quot;headerlink&quot; title=&quot;單圖檔預覽&quot;&gt;&lt;/a&gt;單圖檔預覽&lt;/h4&gt;&lt;p&gt;HTML：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="Vue" scheme="https://runkids.github.io/categories/vue/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="https://runkids.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day02] CSS + JS Clock</title>
    <link href="https://runkids.github.io/js30days/2017123001/"/>
    <id>https://runkids.github.io/js30days/2017123001/</id>
    <published>2017-12-30T04:31:08.000Z</published>
    <updated>2017-12-31T11:58:04.893Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：使用CSS-JS-做出時鐘"><a href="#實做：使用CSS-JS-做出時鐘" class="headerlink" title="實做：使用CSS + JS 做出時鐘"></a>實做：使用CSS + JS 做出時鐘</h5><p><a href="https://codepen.io/runkids/pen/JMNWrP" title="Demo" target="_blank" rel="noopener">Demo</a></p><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>CSS 旋轉效果</li><li>獲取時間換算角度</li><li>利用 javascript 控制 CSS</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><ul><li><p>會用到以下CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform-oragin</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>()</span><br><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.05s</span></span><br><span class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(<span class="selector-tag">x</span>, <span class="selector-tag">x</span>, <span class="selector-tag">x</span>, <span class="selector-tag">x</span>)</span><br></pre></td></tr></table></figure><ol><li>transform-oragin : 調整指針初始位置</li><li>transform: rotate() ：指針角度控制</li><li>transition ：指針跳動的過渡效果</li><li>transition-timing-function : 呈現指針會有滴答滴答的效果</li></ol></li><li><p>利用 setInterval 每秒更新指針角度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>, 1000);</span></span><br></pre></td></tr></table></figure></li><li><p>獲取時間並換算角度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> sec = now.getSeconds();</span><br><span class="line"><span class="keyword">let</span> secDeg = (sec/<span class="number">60</span>) * <span class="number">360</span>;</span><br></pre></td></tr></table></figure></li><li><p>操作CSS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> secHand = <span class="built_in">document</span>.querySelector(<span class="string">".sec-hand"</span>);</span><br><span class="line">secHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;secDeg+<span class="number">90</span>&#125;</span>deg) scale(0.9, 0.5)`</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h5><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin" title="transform-origin" target="_blank" rel="noopener">transform-origin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：使用CSS-JS-做出時鐘&quot;&gt;&lt;a href=&quot;#實做：使用CSS-JS-做出時鐘&quot; class=&quot;headerlink&quot; title=&quot;實做
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day01] JavaScript Drum Kit</title>
    <link href="https://runkids.github.io/js30days/2017122901/"/>
    <id>https://runkids.github.io/js30days/2017122901/</id>
    <published>2017-12-29T04:06:03.000Z</published>
    <updated>2017-12-31T11:57:55.122Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：使用鍵盤按鈕觸發樂器效果的頁面"><a href="#實做：使用鍵盤按鈕觸發樂器效果的頁面" class="headerlink" title="實做：使用鍵盤按鈕觸發樂器效果的頁面"></a>實做：使用鍵盤按鈕觸發樂器效果的頁面</h5><p><a href="https://codepen.io/runkids/pen/qprGvx" title="Demo" target="_blank" rel="noopener">Demo</a></p><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>自定義 HTML 資料屬性</li><li>使用鍵盤觸發 audio</li><li>利用 javascript 控制 CSS</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><ul><li><p>為了按下鍵盤後，能夠對應要發出的音效，必須在每個元素上綁定 keyCode<br>利用自定義資料屬性的方式在div和audio綁定 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data-key 是自訂的屬性</span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">'65'</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">'65'</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加入監聽事件：keydown ，並使用querySelector 來獲取被按下的元素與keyCode</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keydown 事件會把鍵盤的訊息傳入，包含keyCode , keyName等等</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">`div[data-key="<span class="subst">$&#123;event.keyCode&#125;</span>"]`</span>);</span><br></pre></td></tr></table></figure></li><li><p>播放音效後綁定新的class給被按下的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> audio = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>); </span><br><span class="line">audio.currentTime = <span class="number">0</span>;  <span class="comment">//確保可以連續發出音效，加上這個即可</span></span><br><span class="line"></span><br><span class="line">＄(<span class="string">'div'</span>).addClass(<span class="string">'playing'</span>);  <span class="comment">//使用jQery可以這樣綁定Class給元素</span></span><br><span class="line"> <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>).classList.add(<span class="string">'palying'</span>); <span class="comment">//原生JS寫法</span></span><br></pre></td></tr></table></figure></li><li><p>最後音效結束後，必須讓效果恢復原狀：<br>當我們按下元素後，元素會被放大，完成後就可以利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/transitionend" title="transitionened" target="_blank" rel="noopener">transitionened</a> 事件恢復原狀！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key.addEventListener(<span class="string">"transitionend"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(e.propertyName!==<span class="string">'transform'</span>) <span class="keyword">return</span>;</span><br><span class="line">      key.classList.remove(<span class="string">'playing'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h5><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" title="補充" target="_blank" rel="noopener">transitionened 補充</a><br><a href="https://pjchender.blogspot.tw/2017/01/html-5-data-attribute.html" title="data-* Attributes" target="_blank" rel="noopener">什麼是自定義tag？data-* Attributes</a><br><a href="http://keycode.info/" title="這個網站可以查看鍵盤按鍵對應的keyCode" target="_blank" rel="noopener">這裡可以查看鍵盤按鍵對應的keyCode</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：使用鍵盤按鈕觸發樂器效果的頁面&quot;&gt;&lt;a href=&quot;#實做：使用鍵盤按鈕觸發樂器效果的頁面&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>理解Javascrpit[].forEach.call()</title>
    <link href="https://runkids.github.io/javascript/2017122801/"/>
    <id>https://runkids.github.io/javascript/2017122801/</id>
    <published>2017-12-28T09:36:59.000Z</published>
    <updated>2017-12-31T11:55:55.827Z</updated>
    
    <content type="html"><![CDATA[<p>今天在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readAsDataURL" title="developer.mozilla.org" target="_blank" rel="noopener">developer.mozilla.org</a>看到一個有趣的寫法，故在此記錄一下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].forEach.call(files, readAndPreview);</span><br></pre></td></tr></table></figure></p><p>這段寫法其實是下面的簡潔寫法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(files, readAndPreview);</span><br></pre></td></tr></table></figure></p><ul><li>files 可以是DOM元素， ex.  document.querySelectorAll(“.imgFrame”)</li><li>利用call把空陣列的this指向files，如此一來files就能跑forEach了</li><li>而後面的call back function , 可以取得陣列的值及index，可以做額外處理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[].forEach.call([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">": "</span> + item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 0: "a"</span></span><br><span class="line"><span class="comment">// 1: "b"</span></span><br><span class="line"><span class="comment">// 2: "c"</span></span><br><span class="line"><span class="comment">// 3: "d"</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h4><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/call" title="call" target="_blank" rel="noopener">Function.prototype.call</a><br><a href="https://stackoverflow.com/questions/16053357/what-does-foreach-call-do-in-javascript" title="What does [].forEach.call() do in JavaScript?" target="_blank" rel="noopener">What does [].forEach.call() do in JavaScript?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readAsDataURL&quot; title=&quot;developer.mozilla.org&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="javascript" scheme="https://runkids.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>VSCode無法更新最新版本</title>
    <link href="https://runkids.github.io/vscode/2017122701/"/>
    <id>https://runkids.github.io/vscode/2017122701/</id>
    <published>2017-12-27T13:10:30.000Z</published>
    <updated>2017-12-29T16:28:45.777Z</updated>
    
    <content type="html"><![CDATA[<p>今天要更新VSCode,結果跳出下面的訊息,然後就一直更新失敗！</p><p> <code>Could not create temporary directory ：權限被拒絕</code></p><p>解決辦法：必須更改VSCode目錄的權限，在終端機輸入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $USER:admin ~/Library/Caches/com.microsoft.VSCode</span><br><span class="line">sudo chown -R $USER:admin ~/Library/Caches/com.microsoft.VSCode.ShipIt</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天要更新VSCode,結果跳出下面的訊息,然後就一直更新失敗！&lt;/p&gt;
&lt;p&gt; &lt;code&gt;Could not create temporary directory ：權限被拒絕&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解決辦法：必須更改VSCode目錄的權限，在終端機輸入：&lt;b
      
    
    </summary>
    
      <category term="VSCode" scheme="https://runkids.github.io/categories/vscode/"/>
    
    
      <category term="VSCode" scheme="https://runkids.github.io/tags/VSCode/"/>
    
  </entry>
  
</feed>
