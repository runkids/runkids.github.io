<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>威力的學習記錄於此</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://runkids.github.io/"/>
  <updated>2018-07-08T17:18:56.369Z</updated>
  <id>https://runkids.github.io/</id>
  
  <author>
    <name>Willy Hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[筆記] 搞懂 javascript 的 this</title>
    <link href="https://runkids.github.io/javascript/2018032001/"/>
    <id>https://runkids.github.io/javascript/2018032001/</id>
    <published>2018-03-20T13:36:59.000Z</published>
    <updated>2018-07-08T17:18:56.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一般函式的this"><a href="#一般函式的this" class="headerlink" title="一般函式的this"></a>一般函式的this</h3><ul><li>直接執行 -&gt; window</li><li>作為物件成員函示執行 -&gt; 該物件本身</li><li>作為 DOM 事件監聽函示 -&gt; 該 DOM</li><li>作為建構函式 -&gt; 建構出來的實例</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 不一定，取決於函示如何執行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 直接執行 </span></span><br><span class="line">a(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 宣告物件</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'object'</span>,</span><br><span class="line">  a()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a(); <span class="comment">// 做為物件成員，該函示的this就是該物件本身</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = obj.a;</span><br><span class="line">b(); <span class="comment">//3. 直接執行 =&gt; window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 作為dom監聽事件的函示，this代表該dom本身</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 建構函示 this代表new出來的物件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> A(); <span class="comment">// A &#123;&#125; ;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bfunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secObg = &#123;&#125;;</span><br><span class="line">secObg.b = bfunc;</span><br><span class="line">secObg.b() <span class="comment">// secObg</span></span><br><span class="line"><span class="comment">///////////////////////</span></span><br><span class="line"><span class="keyword">const</span> objC = &#123;</span><br><span class="line">  a()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    b(); <span class="comment">//直接執行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objC.a(); <span class="comment">// window</span></span><br><span class="line"><span class="comment">///////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objD = &#123;a&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,objD.a); <span class="comment">//btn</span></span><br></pre></td></tr></table></figure><h3 id="箭頭函式的this"><a href="#箭頭函式的this" class="headerlink" title="箭頭函式的this"></a>箭頭函式的this</h3><ul><li>永遠等於箭頭函式外面的this</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a(); <span class="comment">// window</span></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,a); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">const</span> b = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//永遠等於箭頭函式外面的this</span></span><br><span class="line">  &#125;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,a); <span class="comment">// btn</span></span><br></pre></td></tr></table></figure><h3 id="bind-amp-apply-amp-call"><a href="#bind-amp-apply-amp-call" class="headerlink" title="bind &amp; apply &amp; call"></a>bind &amp; apply &amp; call</h3><ul><li>一般函式：指向綁定該物件的this</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = a.bind(<span class="number">0</span>);  <span class="comment">// Number &#123;0&#125;</span></span><br></pre></td></tr></table></figure><ul><li>箭頭函式： bind &amp; apply &amp; call 會無效</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span><br><span class="line">  <span class="built_in">console</span>.log(x+y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = add.bind(<span class="number">0</span>); <span class="comment">// window</span></span><br><span class="line">b(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">add.apply(<span class="number">0</span>,[<span class="number">3</span>,<span class="number">5</span>]); <span class="comment">// window 無效</span></span><br><span class="line">add.call(<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>); <span class="comment">// window 無效</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一般函式的this&quot;&gt;&lt;a href=&quot;#一般函式的this&quot; class=&quot;headerlink&quot; title=&quot;一般函式的this&quot;&gt;&lt;/a&gt;一般函式的this&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直接執行 -&amp;gt; window&lt;/li&gt;
&lt;li&gt;作為物件成員函示執
      
    
    </summary>
    
      <category term="javascript" scheme="https://runkids.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day07] Array Cardio Day2</title>
    <link href="https://runkids.github.io/js30days/2018031801/"/>
    <id>https://runkids.github.io/js30days/2018031801/</id>
    <published>2018-03-18T13:33:55.000Z</published>
    <updated>2018-07-08T14:37:26.029Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：Array方法操作"><a href="#實做：Array方法操作" class="headerlink" title="實做：Array方法操作"></a>實做：Array方法操作</h5><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>Array方法操作：some , every , find , findIndex , slice , splice</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><p>請把程式碼貼到瀏覽器console查看結果</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Wes'</span>, <span class="attr">year</span>: <span class="number">1988</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Kait'</span>, <span class="attr">year</span>: <span class="number">1986</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Irv'</span>, <span class="attr">year</span>: <span class="number">1970</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Lux'</span>, <span class="attr">year</span>: <span class="number">2015</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> comments = [</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'Love this!'</span>, <span class="attr">id</span>: <span class="number">523423</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'Super good'</span>, <span class="attr">id</span>: <span class="number">823423</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'You are the best'</span>, <span class="attr">id</span>: <span class="number">2039842</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'Ramen is my fav food ever'</span>, <span class="attr">id</span>: <span class="number">123523</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'Nice Nice Nice!'</span>, <span class="attr">id</span>: <span class="number">542328</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">some</a><br><code>some()</code> 方法中直到某個陣列元素使此函數為 true，就立即返回 true。所以可以用來判斷一個陣列中，是否存在某個符合條件的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> isAdult = people.some( <span class="function"><span class="params">person</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> currentYear = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getFullYear();</span><br><span class="line">  <span class="keyword">return</span> currentYear - person.year &gt;= <span class="number">19</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;isAdult&#125;); <span class="comment">// &#123; isAdult : true &#125;;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">every</a><br><code>every()</code> 方法中除非所有值都使此函數為 true，才會返回 true 值，否則為 false。主要用處，即判斷是否所有元素都符合條件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allAdult = people.every( <span class="function"><span class="params">person</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - person.year &gt;= <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;allAdult&#125;); <span class="comment">// &#123; allAdult : false &#125;;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">find</a><br><code>find()</code> 方法會回傳第一個滿足所提供之測試函式的元素值。否則回傳 undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> comment = comments.find(<span class="function"><span class="params">comment</span> =&gt;</span> comment.id == <span class="number">823423</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;comment&#125;); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    id: 823423,</span></span><br><span class="line"><span class="comment">    text: "Super good"</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex" target="_blank" rel="noopener">findIndex</a><br><code>findIndex()</code> 方法將依據提供的測試函式，尋找陣列中符合的元素，並返回其 index（索引）。如果沒有符合的對象，將返回 -1 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> index = comments.findIndex(<span class="function"><span class="params">comment</span> =&gt;</span> comment.id == <span class="number">823423</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;index&#125;); <span class="comment">//1</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">slice</a><br><code>slice()</code>方法返回一個從開始到結束（不包括結束）選擇的陣列的一部分淺拷貝到一個新陣列。<code>且原始數組不會被修改</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = [<span class="string">'ant'</span>, <span class="string">'bison'</span>, <span class="string">'camel'</span>, <span class="string">'duck'</span>, <span class="string">'elephant'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["camel", "duck", "elephant"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["camel", "duck"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["bison", "camel", "duck", "elephant"]</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">splice</a><br><code>splice()</code>原陣列會被修改。第二個參數代表要刪掉的<code>元素個數</code>，之後可選的參數，表示要替補被刪除位置的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> months = [<span class="string">'Jan'</span>, <span class="string">'March'</span>, <span class="string">'April'</span>, <span class="string">'June'</span>];</span><br><span class="line">months.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'Feb'</span>);</span><br><span class="line"><span class="comment">// inserts at 1st index position</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array ['Jan', 'Feb', 'March', 'April', 'June']</span></span><br><span class="line"></span><br><span class="line">months.splice(<span class="number">4</span>, <span class="number">1</span>, <span class="string">'May'</span>);</span><br><span class="line"><span class="comment">// replaces 1 element at 4th index</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array ['Jan', 'Feb', 'March', 'April', 'May']</span></span><br></pre></td></tr></table></figure><p>所以想要删除一個陣列元素，有兩種方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除方法一，splice()</span></span><br><span class="line">comments.splice(index, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除方法二，slice </span></span><br><span class="line"><span class="keyword">const</span> newComments = [</span><br><span class="line">  ...comments.slice(<span class="number">0</span>, index),</span><br><span class="line">  ...comments.slice(index + <span class="number">1</span>)</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：Array方法操作&quot;&gt;&lt;a href=&quot;#實做：Array方法操作&quot; class=&quot;headerlink&quot; title=&quot;實做：Array方法
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day06] Ajax Type Ahead</title>
    <link href="https://runkids.github.io/js30days/2018031101/"/>
    <id>https://runkids.github.io/js30days/2018031101/</id>
    <published>2018-03-11T02:31:08.000Z</published>
    <updated>2018-07-08T14:10:20.893Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：fetch-api-搭配-filter-實現關鍵字篩選器"><a href="#實做：fetch-api-搭配-filter-實現關鍵字篩選器" class="headerlink" title="實做：fetch api 搭配 filter 實現關鍵字篩選器"></a>實做：fetch api 搭配 filter 實現關鍵字篩選器</h5><iframe height="500" scrolling="no" title="JS30Days06" src="//codepen.io/runkids/embed/NzQzzx/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/NzQzzx/" target="_blank" rel="noopener">JS30Days06</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>利用 Fetch API 取得資料</li><li>使用 filter 搭配正規表達式篩選資料</li><li>input 事件和 change 事件</li><li>關鍵字上色</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><ul><li><p>利用 Fetch API 取得資料</p><ul><li><p>使用 <code>fecth</code> API 會回傳 <code>Promise</code> ，第一個回傳的是一個 <code>readableStream</code>，將它解析成 <code>json</code> 後來讀取</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cities = []</span><br><span class="line"><span class="keyword">const</span> endpoint = <span class="string">'https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json'</span></span><br><span class="line"></span><br><span class="line">fetch(endpoint)</span><br><span class="line">.then(<span class="function"><span class="params">blob</span> =&gt;</span> blob.json())    <span class="comment">// 取得 readableStream，並轉成 json 後 return</span></span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span> cities.push(...data)); <span class="comment">//把 data 給 cities</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用正規表達式篩選資料</p><ol><li><p>利用 <code>new RegExp(regex, flag)</code> 來建立正規式：<br> 第一個參數: 正規表達式的內容<br> 第二個參數: <code>flag</code><br>– <code>g</code> 表示 global search，也就是會去找整份文件，而不是找到就停<br>– <code>i</code> 表示 case insensitive，也就是不去區分大小寫</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(wordToMatch, <span class="string">'gi'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>String.prototype.match(regexp)</code> 這個方法來判斷給的字串當中是否有符合該 regexp 的內容，符合會回傳陣列，否則回傳 <code>null</code>。</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMatch</span> (<span class="params">wordToMatch, cities</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cities.filter(<span class="function"><span class="params">place</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(wordToMatch, <span class="string">'gi'</span>)</span><br><span class="line">        <span class="keyword">return</span> place.city.match(regex) || place.state.match(regex)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> filter用法可以參考這篇 <a href="https://runkids.github.io/js30days/2018010401/">[筆記][JS30天-Day04] Array Cardio Day1</a>  </p></li><li>使用 <code>String.prototype.replace(regex|substr, newSubstr)</code> 來置換內容,並在此時用html tag加上class達到 <code>關鍵字背景色</code> 的效果 <pre><code class="jsx"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(e.target.value, <span class="string">'gi'</span>);<span class="comment">/* 加上class達到 `關鍵字背景色` 的效果 */</span><span class="keyword">const</span> cityNameHighlight = place.city.replace(regex, <span class="string">`&lt;span class="hl"&gt;<span class="subst">${e.target.value}</span>&lt;/span&gt;`</span>) ;<span class="keyword">const</span> stateNameHighlight = place.state.replace(regex, <span class="string">`&lt;span class="hl"&gt;<span class="subst">${e.target.value}</span>&lt;/span&gt;`</span>) ;</code></pre></li></ol></li><li>input 事件和 change 事件的差異<ul><li><code>input event</code> 會在任何元素值改變的時候被出發（例如每打一個字都會觸發一次）</li><li><code>change event</code> 則是會在有元素值改變，且該元素脫離 focus 狀態時才觸發</li></ul></li></ul><h5 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h5><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API" target="_blank" rel="noopener">Fetch_API</a></p><p><a href="https://www.youtube.com/watch?v=xrMH9uMNGt8" target="_blank" rel="noopener">線上讀書會-regex 快速入門（承億主講）</a></p><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：fetch-api-搭配-filter-實現關鍵字篩選器&quot;&gt;&lt;a href=&quot;#實做：fetch-api-搭配-filter-實現關鍵字篩選器
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day05] Flex Panels Image Gallery</title>
    <link href="https://runkids.github.io/js30days/2018030401/"/>
    <id>https://runkids.github.io/js30days/2018030401/</id>
    <published>2018-03-04T12:31:08.000Z</published>
    <updated>2018-07-08T10:14:02.787Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：使用flex實做出圖片牆"><a href="#實做：使用flex實做出圖片牆" class="headerlink" title="實做：使用flex實做出圖片牆"></a>實做：使用flex實做出圖片牆</h5><iframe height="665" scrolling="no" title="JS30Days05" src="//codepen.io/runkids/embed/RJvjjq/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/RJvjjq/" target="_blank" rel="noopener">JS30Days05</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>flexbox</li><li>element.classList.toggle()</li><li>transitionend Event</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><ul><li><p>CSS在此篇為主要學習重點</p><ul><li>將<code>.panels</code>設為 <code>display : flex</code></li><li>將每個<code>panel</code>設為 <code>flex : 1</code></li><li>將每個<code>panel</code>設為 <code>display : flex</code> , 並使用 <code>flex-direction</code>將子元素<code>&lt;p&gt;</code>改為垂直方向</li></ul></li><li><p>為每一個<code>panel</code>加入監聽事件：click 以及 transitionend</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">panels.forEach(<span class="function"><span class="params">panel</span>=&gt;</span>&#123;</span><br><span class="line">  panel.addEventListener(<span class="string">'click'</span>,toggleOpen);</span><br><span class="line">  panel.addEventListener(<span class="string">'transitionend'</span>,toggleActive);<span class="comment">//動畫結束後觸發transitionend事件</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>function <code>toggleOpen</code> 以及 <code>toggleActive</code> 使用toggle新增移除class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">toggle ( String [, force] )</span><br><span class="line">When only one argument is present: Toggle class value; i.e., if class exists then remove it and return false, if not, then add it and return true.</span><br><span class="line">When a second argument is present: If the second argument is true, add specified class value, and if it is false, remove it.</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleOpen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.classList.toggle(<span class="string">'open'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleActive</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 因class open 有新增 flex 屬性</span></span><br><span class="line">  <span class="comment">// 確保有套上open後才新增open-active</span></span><br><span class="line">  <span class="keyword">if</span>(e.propertyName.includes(<span class="string">'flex'</span>))&#123;</span><br><span class="line">    <span class="keyword">this</span>.classList.toggle(<span class="string">'open-active'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel</span><span class="selector-class">.open</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">5</span>; <span class="comment">/*被點擊的圖片比例改變為5*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h5><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" title="補充" target="_blank" rel="noopener">transitionened 補充</a></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Element/classList" target="_blank" rel="noopener">Element.classList</a></p><iframe height="265" scrolling="no" title="Flexbox Properties Demonstration" src="//codepen.io/justd/embed/yydezN/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/justd/pen/yydezN/" target="_blank" rel="noopener">Flexbox Properties Demonstration</a> by Dimitar (<a href="https://codepen.io/justd" target="_blank" rel="noopener">@justd</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：使用flex實做出圖片牆&quot;&gt;&lt;a href=&quot;#實做：使用flex實做出圖片牆&quot; class=&quot;headerlink&quot; title=&quot;實做：使
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用.sync修飾符對props進行雙向綁定</title>
    <link href="https://runkids.github.io/vue/2018022001/"/>
    <id>https://runkids.github.io/vue/2018022001/</id>
    <published>2018-02-20T11:01:25.000Z</published>
    <updated>2018-07-07T16:36:49.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-sync實做雙向綁定"><a href="#使用-sync實做雙向綁定" class="headerlink" title="使用.sync實做雙向綁定"></a>使用.sync實做雙向綁定</h2><h6 id="注意：此文是記錄-Vue-2-3-0-sync-而不是1-0的"><a href="#注意：此文是記錄-Vue-2-3-0-sync-而不是1-0的" class="headerlink" title="注意：此文是記錄 Vue 2.3.0 .sync 而不是1.0的"></a>注意：此文是記錄 Vue 2.3.0 .sync 而不是1.0的</h6><ul><li>Demo  <iframe src="https://codesandbox.io/embed/j28m5mw4n3" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe></li></ul><ul><li><p>用法：以Demo為例</p><ul><li><p>當子組件的 childrenText 發生變化時，使用<code>update:my-prop-name</code>的模式觸發 emit</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">"update:parentText"</span>, e);</span><br></pre></td></tr></table></figure></li><li><p>而父組件監聽該事件 （先看原本的寫法</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Children :parentText=<span class="string">"text"</span> @update:parentText=<span class="string">"e=&gt;text=e"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>改成使用.sync，達到同樣效果</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Children :parentText.sync=<span class="string">"text"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="資源參考"><a href="#資源參考" class="headerlink" title="資源參考"></a>資源參考</h5><p><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6" title="sync-修饰符" target="_blank" rel="noopener">sync-修饰符</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用-sync實做雙向綁定&quot;&gt;&lt;a href=&quot;#使用-sync實做雙向綁定&quot; class=&quot;headerlink&quot; title=&quot;使用.sync實做雙向綁定&quot;&gt;&lt;/a&gt;使用.sync實做雙向綁定&lt;/h2&gt;&lt;h6 id=&quot;注意：此文是記錄-Vue-2-3-0-sy
      
    
    </summary>
    
      <category term="Vue" scheme="https://runkids.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://runkids.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>[小技巧] flex 搭配 margin 上下左右置中</title>
    <link href="https://runkids.github.io/css/2018021301/"/>
    <id>https://runkids.github.io/css/2018021301/</id>
    <published>2018-02-13T03:42:10.000Z</published>
    <updated>2018-07-07T12:02:40.079Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flex-搭配-margin-上下左右置中"><a href="#flex-搭配-margin-上下左右置中" class="headerlink" title="flex 搭配 margin 上下左右置中"></a>flex 搭配 margin 上下左右置中</h3><ul><li><p>當外層元素display為flex時，內層元素只要使用 <code>margin : auto ;</code> 就可以簡單達到上下左右置中效果</p></li><li><p>範例如下：</p></li></ul><iframe height="265" scrolling="no" title="Flex & Margin Auto" src="//codepen.io/runkids/embed/QxeKXW/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/QxeKXW/" target="_blank" rel="noopener">Flex &amp; Margin Auto</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;flex-搭配-margin-上下左右置中&quot;&gt;&lt;a href=&quot;#flex-搭配-margin-上下左右置中&quot; class=&quot;headerlink&quot; title=&quot;flex 搭配 margin 上下左右置中&quot;&gt;&lt;/a&gt;flex 搭配 margin 上下左右置中&lt;/
      
    
    </summary>
    
      <category term="css" scheme="https://runkids.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://runkids.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>[CSS] Float &amp; Position</title>
    <link href="https://runkids.github.io/css/2018021101/"/>
    <id>https://runkids.github.io/css/2018021101/</id>
    <published>2018-02-11T13:42:10.000Z</published>
    <updated>2018-06-29T07:33:46.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建立浮動版面"><a href="#建立浮動版面" class="headerlink" title="建立浮動版面"></a>建立浮動版面</h2><p>建立浮動的圖像應預先設定好寬度，且盡量使用百分比來設計，這樣可以根據螢幕尺寸自動調整，更容易建立響應式網頁<br><a href="https://templated.co/" target="_blank" rel="noopener">免費模版</a></p><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><pre><code>float 屬性有 left | right | none     1. left        The element must float on the left side of its containing block.    2. right        The element must float on the right side of its containing block.    3. none        The element must not float.</code></pre><ul><li>以下圖為例，其中有兩個向左浮動，一個向右浮動。要注意到<code>第二個向左浮動的正方形</code>被放在<code>第一個向左浮動的正方形</code>的右邊。如果還有更多的正方形這樣浮動，它們會<code>繼續向右堆放</code>，直到填滿容器一整行，之後換行至下一行<br><img src="https://developer.mozilla.org/@api/deki/files/4927/=floats.png" alt=""></li></ul><h2 id="解決浮動問題"><a href="#解決浮動問題" class="headerlink" title="解決浮動問題"></a>解決浮動問題</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><pre><code>用來抵銷 float 屬性的作用1. left：消除左邊的浮動，元素被向下移動。2. right：消除右邊的浮動，元素被向下移動。3. both：消除左邊及右邊的浮動，元素被向下移動。4. none：不消除任何一邊的浮動，元素不會下移動。</code></pre><h4 id="實際解決方案："><a href="#實際解決方案：" class="headerlink" title="實際解決方案："></a>實際解決方案：</h4><pre><code>1. 浮動元素末尾添加一個空的標籤例如&lt;div style=”clear:both”&gt;2. 使用br標籤 &lt;br clear=&quot;all&quot; /&gt;3. 設置父元素overflow值設置為hidden或auto；4. 父元素也改為float屬性5. CSS Clearfix</code></pre><p><img src="https://internetingishard.com/html-and-css/floats/methods-for-clearing-floats-6429d9.png" alt=""></p><iframe height="505" scrolling="no" title="float & clear" src="//codepen.io/runkids/embed/GGOmPP/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/GGOmPP/" target="_blank" rel="noopener">float &amp; clear</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><iframe height="265" scrolling="no" title="float overflow hidden" src="//codepen.io/runkids/embed/RJJojP/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/RJJojP/" target="_blank" rel="noopener">float overflow hidden</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><iframe height="1300" scrolling="no" title="float & clear" src="//codepen.io/runkids/embed/xzPyOE/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/xzPyOE/" target="_blank" rel="noopener">float &amp; clear</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h3 id="CSS-Clearfix-清除浮動"><a href="#CSS-Clearfix-清除浮動" class="headerlink" title="CSS Clearfix 清除浮動"></a>CSS Clearfix 清除浮動</h3><pre><code>是由Nicolas Gallagher所提出來的，同時也應該是目前最受歡迎的clearfix方法(bootstrap所採用)</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom: 1; /*For IE 6&amp;7 only*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>一般情況只需要after即可，加上before是為了避免發生『邊界重疊 ( Collapsing margins )』的問題</p><ul><li><a href="http://culaidocf.blogspot.com/2013/02/clearfix.html" target="_blank" rel="noopener">.clearfix 的前世今生</a></li></ul></li></ul><p><img src="https://i0.wp.com/kgl.idv.tw/wp-content/uploads/2014/11/clearfix.gif?resize=700%2C394" alt=""></p><iframe height="265" scrolling="no" title="clearfix" src="//codepen.io/runkids/embed/LrOoOL/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/LrOoOL/" target="_blank" rel="noopener">clearfix</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h3 id="其它參考"><a href="#其它參考" class="headerlink" title="其它參考:"></a>其它參考:</h3><p><a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="noopener">那些年我们一起清除过的浮动</a><br><a href="https://css-tricks.com/snippets/css/clear-fix/" target="_blank" rel="noopener">The Clearfix: Force an Element To Self-Clear its Children</a></p><h2 id="建立全版面高的欄位"><a href="#建立全版面高的欄位" class="headerlink" title="建立全版面高的欄位"></a>建立全版面高的欄位</h2><p><img src="https://cdn.css-tricks.com/wp-content/uploads/2010/10/desire1.png" alt=""></p><h4 id="1-flexbox-的-flex設定比例"><a href="#1-flexbox-的-flex設定比例" class="headerlink" title="1. flexbox 的 flex設定比例"></a>1. flexbox 的 flex設定比例</h4> <iframe height="265" scrolling="no" title="Flexbox Method" src="//codepen.io/chriscoyier/embed/raGKwM/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/chriscoyier/pen/raGKwM/" target="_blank" rel="noopener">Flexbox Method</a> by Chris Coyier  (<a href="https://codepen.io/chriscoyier" target="_blank" rel="noopener">@chriscoyier</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h4 id="2-使用table"><a href="#2-使用table" class="headerlink" title="2. 使用table"></a>2. 使用table</h4><p><a href="https://codepen.io/mariemosley/pen/232597be901e13ee8bed1b27e66c3102" target="_blank" rel="noopener">使用table</a></p><iframe height="265" scrolling="no" title="wXPVQy" src="//codepen.io/runkids/embed/wXPVQy/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/wXPVQy/" target="_blank" rel="noopener">wXPVQy</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h4 id="3-One-True-Layout"><a href="#3-One-True-Layout" class="headerlink" title="3. One True Layout"></a>3. One True Layout</h4><iframe height="265" scrolling="no" title="One True Layout Method" src="//codepen.io/runkids/embed/WyXVPy/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/WyXVPy/" target="_blank" rel="noopener">One True Layout Method</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h3 id="參考自"><a href="#參考自" class="headerlink" title="參考自:"></a>參考自:</h3><p><a href="https://css-tricks.com/fluid-width-equal-height-columns/" target="_blank" rel="noopener">Fluid Width Equal Height Columns</a></p><h2 id="避免掉落浮動"><a href="#避免掉落浮動" class="headerlink" title="避免掉落浮動"></a>避免掉落浮動</h2><h3 id="使用box-sizing"><a href="#使用box-sizing" class="headerlink" title="使用box sizing"></a>使用box sizing</h3><pre><code>box-sizing: content-box | padding-box | border-boxcontent-box: 預設值。元素呈現的寬度是左右邊線粗系+CSS寬度+左右內距padding-box: 元素呈現的寬度是CSS寬度和左右內距，不含任何邊線border-box: 包含內距 邊線 CSS寬度</code></pre><iframe height="735" scrolling="no" title="gKoYzd" src="//codepen.io/runkids/embed/gKoYzd/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/gKoYzd/" target="_blank" rel="noopener">gKoYzd</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h2 id="CSS定位屬性"><a href="#CSS定位屬性" class="headerlink" title="CSS定位屬性"></a>CSS定位屬性</h2><h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><p><img src="https://internetingishard.com/html-and-css/advanced-positioning/css-positioning-schemes-790d5b.png" alt=""><br><img src="https://i.imgur.com/3TmCIHV.png" alt=""></p><ul><li>static: 只能動內外距 ， 在排版系統內</li><li>relative: 可以簡易偏移，在排版系統內</li><li>absolute: 絕對定位 ， 在排版系統外</li><li>fixed: 視窗絕對定位 ， 在排版系統外</li></ul><p><code>float 和 absolute 及 fixed 無法同時作用在同一個元素上</code></p><ul><li>postion: absolute 較好的使用方式：<br>在外層元素上加上position: relative;<br>這樣絕對位置會依照外層元素而定，而不是瀏覽器視窗</li></ul><p><img src="https://i.imgur.com/eflGond.png" alt=""></p><iframe height="665" scrolling="no" title="ZRRLPY" src="//codepen.io/runkids/embed/ZRRLPY/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/ZRRLPY/" target="_blank" rel="noopener">ZRRLPY</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><h2 id="疊層元素"><a href="#疊層元素" class="headerlink" title="疊層元素"></a>疊層元素</h2><h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><ul><li>數值越大，越接近頂層</li><li>若有多個z-index數值較大的會出現在其它上方</li><li>可以使用負數的z-index放在元素之後</li><li>有些瀏覽器最大值為 2147483647</li></ul><h2 id="隱藏部分頁面"><a href="#隱藏部分頁面" class="headerlink" title="隱藏部分頁面"></a>隱藏部分頁面</h2><h4 id="visibility-vs-display-vs-opacity"><a href="#visibility-vs-display-vs-opacity" class="headerlink" title="visibility vs display vs opacity"></a>visibility <code>vs</code> display <code>vs</code> opacity</h4><ul><li>使用 visibility:{hidden} 隱藏元素</li><li>使用 visibility:{visible} 顯示元素</li><li>visibility 的 <code>hidden</code> 與 dispaly 的 <code>none</code> 相似</li><li>差異：<ul><li>display:{none} 會完全從頁面移除</li><li>visibility:{hidden} 會讓瀏覽器不顯示元素</li><li>大多數開發者使用 display:{none}</li></ul></li><li>opacity: 0 也可以隱藏元素，1則為顯示</li><li>opacity 套用CSS動畫很好用</li></ul><iframe height="265" scrolling="no" title="隱藏顯示元素" src="//codepen.io/runkids/embed/jKKewm/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/jKKewm/" target="_blank" rel="noopener">隱藏顯示元素</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p><a href="http://www.menucool.com/" target="_blank" rel="noopener">更多素材網站</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;建立浮動版面&quot;&gt;&lt;a href=&quot;#建立浮動版面&quot; class=&quot;headerlink&quot; title=&quot;建立浮動版面&quot;&gt;&lt;/a&gt;建立浮動版面&lt;/h2&gt;&lt;p&gt;建立浮動的圖像應預先設定好寬度，且盡量使用百分比來設計，這樣可以根據螢幕尺寸自動調整，更容易建立響應式網頁&lt;
      
    
    </summary>
    
      <category term="css" scheme="https://runkids.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://runkids.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] 理解 Map(映射) &amp; WeakMap(弱映射)</title>
    <link href="https://runkids.github.io/javascript/2018020102/"/>
    <id>https://runkids.github.io/javascript/2018020102/</id>
    <published>2018-02-01T11:42:10.000Z</published>
    <updated>2018-07-01T10:40:29.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><hr><ul><li><p>傳統上我們使用 Object 建立 key/value-pair 資料結構，來模擬 maps。<br>但缺點是無法使用非字串值的key。ES6的Map就解決這樣的問題了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">id</span>:<span class="number">1</span>&#125;,</span><br><span class="line">      y = &#123;<span class="attr">id</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">m[x] = <span class="string">"foo"</span>; <span class="comment">// 這裡的key變成 [object Objec]</span></span><br><span class="line">m[y] = <span class="string">"bar"</span>; <span class="comment">// 這裡的key變成 [object Objec]</span></span><br><span class="line"></span><br><span class="line">m[x]; <span class="comment">// bar</span></span><br><span class="line">m[y]; <span class="comment">// bar</span></span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">id</span>:<span class="number">1</span>&#125;,</span><br><span class="line">      y = &#123;<span class="attr">id</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">m.set(x,<span class="string">"foo"</span>);</span><br><span class="line">m.set(y,<span class="string">"bar"</span>);</span><br><span class="line"></span><br><span class="line">m.get(x); <span class="comment">// foo</span></span><br><span class="line">m.get(y); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure></li><li><p>set(key,value)</p><ul><li>替 Map 新增一個鍵/值並回傳該Map</li><li>key 可以是任何型態</li><li>如果key已經存在，則會蓋掉原有的值</li><li><p>set方法會返回該Map，所以可以一直串接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">m.set(<span class="string">'edition'</span>, <span class="number">6</span>)</span><br><span class="line">m.set(<span class="number">262</span>, <span class="string">'standard'</span>)</span><br><span class="line">m.set(<span class="literal">undefined</span>, <span class="string">'nah'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">.set(<span class="number">1</span>, <span class="string">'a'</span>)</span><br><span class="line">.set(<span class="number">2</span>, <span class="string">'b'</span>)</span><br><span class="line">.set(<span class="number">3</span>, <span class="string">'c'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>get(key)</p><ul><li>讀取對應key的鍵值，若找不到回傳 <code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> func = <span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">'Hello World!'</span>)&#125;;</span><br><span class="line">m.set(func,<span class="string">'Hello Map'</span>);</span><br><span class="line">m.get(func) <span class="comment">//Hello Map</span></span><br><span class="line">m.get(<span class="string">'hi'</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>size</p><ul><li>返回Map成員的總數量 <code>new Map().size ;</code></li></ul></li><li><p>delete(key)</p><ul><li><p>刪除key的某個值，返回布林值，true代表刪除成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="literal">undefined</span>, <span class="string">'nah'</span>);</span><br><span class="line">m.has(<span class="literal">undefined</span>)     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">m.delete(<span class="literal">undefined</span>)</span><br><span class="line">m.has(<span class="literal">undefined</span>)       <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>has(key)</p><ul><li><p>返回布林值，判斷某個key是否存在Map中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">m.set(<span class="string">'edition'</span>, <span class="number">6</span>);</span><br><span class="line">m.set(<span class="number">262</span>, <span class="string">'standard'</span>);</span><br><span class="line">m.set(<span class="literal">undefined</span>, <span class="string">'nah'</span>);</span><br><span class="line"></span><br><span class="line">m.has(<span class="string">'edition'</span>) <span class="comment">// true</span></span><br><span class="line">m.has(<span class="string">'years'</span>) <span class="comment">// false</span></span><br><span class="line">m.has(<span class="number">262</span>) <span class="comment">// true</span></span><br><span class="line">m.has(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>clear</p><ul><li>刪除Map所有值，不會返回值 <code>new Map().clear() ;</code></li></ul></li></ul><h4 id="Map-迭代"><a href="#Map-迭代" class="headerlink" title="Map 迭代"></a>Map 迭代</h4><ol><li>keys()</li><li>values()</li><li>entries()</li><li>forEach()</li><li>Map迭代順序是依照加入的順序</li><li><p>Map 結構的默認遍歷器接口（Symbol.iterator屬性），就是entries方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map[<span class="built_in">Symbol</span>.iterator] === map.entries <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'F'</span>, <span class="string">'no'</span>],</span><br><span class="line">  [<span class="string">'T'</span>,  <span class="string">'yes'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F"</span></span><br><span class="line"><span class="comment">// "T"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "no"</span></span><br><span class="line"><span class="comment">// "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同於使用map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>Map 轉為陣列幾種方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">[...map.keys()]</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[...map.values()]</span><br><span class="line"><span class="comment">// ['one', 'two', 'three']</span></span><br><span class="line"></span><br><span class="line">[...map.entries()]</span><br><span class="line"><span class="comment">// [[1,'one'], [2, 'two'], [3, 'three']]</span></span><br><span class="line"></span><br><span class="line">[...map]</span><br><span class="line"><span class="comment">// [[1,'one'], [2, 'two'], [3, 'three']]</span></span><br></pre></td></tr></table></figure></li><li><p>forEach<br>與陣列forEach相似</p></li></ul><hr><h3 id="WeekSet"><a href="#WeekSet" class="headerlink" title="WeekSet"></a>WeekSet</h3><ul><li><code>WeekSet</code> 與 <code>map</code> 外部行為大致相同</li><li>只接受物件作為鍵值，若物件本身被GC了，<code>WeekSet</code>中的條目(entry)也會被移除</li><li>沒有size特性，也沒有clear()方法，也沒有提供任何迭代方法</li><li><p>承上<code>WeakMap</code>只有四個方法可用：get()、set()、has()、delete()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> WeekMap();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123;<span class="attr">id</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    y = &#123;<span class="attr">id</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">m.set(x,<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">m.has(x); <span class="comment">// true</span></span><br><span class="line">m.has(y); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>如果作為map鍵值的物件會被刪除或可能被GC，那麼<code>WeekMap</code>會是更好的選擇</p></li><li><p>WeakMap 的用途例子</p><ul><li><p>DOM 作為鍵名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> myElement = <span class="built_in">document</span>.getElementById(<span class="string">'logo'</span>);</span><br><span class="line">  <span class="keyword">let</span> myWeakmap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">  myWeakmap.set(myElement, &#123;<span class="attr">timesClicked</span>: <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">  myElement.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> logoData = myWeakmap.get(myElement);</span><br><span class="line">    logoData.timesClicked++;</span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">/*一旦這個 DOM 節點刪除，該狀態就會自動消失，不存在內存洩漏風險*/</span></span><br></pre></td></tr></table></figure></li><li><p>私有屬性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> _counter = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">  <span class="keyword">const</span> _action = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Countdown</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(counter, action) &#123;</span><br><span class="line">      _counter.set(<span class="keyword">this</span>, counter);</span><br><span class="line">      _action.set(<span class="keyword">this</span>, action);</span><br><span class="line">    &#125;</span><br><span class="line">    dec() &#123;</span><br><span class="line">      <span class="keyword">let</span> counter = _counter.get(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (counter &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">      counter--;</span><br><span class="line">      _counter.set(<span class="keyword">this</span>, counter);</span><br><span class="line">      <span class="keyword">if</span> (counter === <span class="number">0</span>) &#123;</span><br><span class="line">        _action.get(<span class="keyword">this</span>)();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> c = <span class="keyword">new</span> Countdown(<span class="number">2</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'DONE'</span>));</span><br><span class="line"></span><br><span class="line">  c.dec()</span><br><span class="line">  c.dec() <span class="comment">// DONE</span></span><br><span class="line"><span class="comment">/* 一旦c被刪除，Countdown 內部的 _counter和_action也就隨之消失，不會造成內存洩漏 */</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="參考資料來源"><a href="#參考資料來源" class="headerlink" title="參考資料來源"></a>參考資料來源</h4><ol><li><a href="http://es6.ruanyifeng.com/#docs/set-map" title="Set 和 Map 数据结构" target="_blank" rel="noopener">Set 和 Map 数据结构</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" title="MDN - Map" target="_blank" rel="noopener">MDN - Map</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap" title="MDN - WeakMap" target="_blank" rel="noopener">MDN - WeakMap</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;傳統上我們使用 Object 建立 key/value-pair 資料結構，來模擬 maps。&lt;br&gt;但
      
    
    </summary>
    
      <category term="javascript" scheme="https://runkids.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] 理解 Set(集合) &amp; WeakSet(弱集合)</title>
    <link href="https://runkids.github.io/javascript/2018020101/"/>
    <id>https://runkids.github.io/javascript/2018020101/</id>
    <published>2018-02-01T01:42:10.000Z</published>
    <updated>2018-07-01T09:15:39.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><hr><ul><li><p>可以儲存任何類型的唯一值，不論型別或物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Set</span>([iterable]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="comment">//去除重複成員的寫法</span></span><br><span class="line"><span class="built_in">Array</span>.from( set )  <span class="comment">// 1,2,3,4</span></span><br><span class="line">[ ...set ]  <span class="comment">// 1,2,3,4</span></span><br></pre></td></tr></table></figure></li><li><p>add</p><ul><li><p>替 Set 新增一個值並回傳 Set Object</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">mySet.add(<span class="string">'1'</span>); <span class="comment">// String</span></span><br><span class="line">mySet.add(<span class="number">2</span>); <span class="comment">// Number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">key</span>:<span class="string">'hello'</span>&#125;;</span><br><span class="line"></span><br><span class="line">mySet.add(obj); <span class="comment">// Object</span></span><br><span class="line"></span><br><span class="line">mySet.add(obj); <span class="comment">//因obj是參考同一個物件，因此會被濾掉</span></span><br><span class="line"></span><br><span class="line">mySet.add(&#123;<span class="attr">key</span>:<span class="string">'hello'</span>&#125;); <span class="comment">//和obj是參考不同的物件，所以這個可以被Set新增</span></span><br><span class="line"></span><br><span class="line">mySet.add(&#123;<span class="attr">key</span>:<span class="string">'hello'</span>&#125;); <span class="comment">//同上，因為是全新的一個參考，所以這個也會被Set新增</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">NaN</span>;</span><br><span class="line">mySet.add(a);</span><br><span class="line">mySet.add(b); <span class="comment">// Set 判斷 NaN 是相等的 </span></span><br><span class="line"></span><br><span class="line">mySet.forEach(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">console</span>.log(item)); </span><br><span class="line"><span class="comment">// "1" , 2 , &#123; key: "hello" &#125; , &#123; key: "hello" &#125; , &#123; key: "hello" &#125; , NaN</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>size</p><ul><li>返回Set值的總數量 <code>mySet.size ; // 6</code></li></ul></li><li><p>delete  </p><ul><li><p>刪除Set的某個值，返回布林值，true代表刪除成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">set.delete(<span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>has</p><ul><li><p>返回布林值，判斷是否為Set值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line">mySet.add(o);</span><br><span class="line">mySet.has(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">mySet.has(<span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">mySet.has(o); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>clear</p><ul><li>刪除Set所有值，不會返回值 <code>mySet.clear() ;</code></li></ul></li></ul><h4 id="Set-迭代"><a href="#Set-迭代" class="headerlink" title="Set 迭代"></a>Set 迭代</h4><ol><li>keys()</li><li>values()</li><li>entries()</li><li>forEach()</li></ol><ul><li>keys方法和values方法的行為完全一樣</li><li><p>entries 會返回鍵名與鍵值，且完全一樣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// A</span></span><br><span class="line">  <span class="comment">// B</span></span><br><span class="line">  <span class="comment">// C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A</span></span><br><span class="line"><span class="comment">// B</span></span><br><span class="line"><span class="comment">// C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["A", "A"]</span></span><br><span class="line"><span class="comment">// ["B", "B"]</span></span><br><span class="line"><span class="comment">// ["C", "C"]</span></span><br></pre></td></tr></table></figure></li><li><p>根據已上結論，直接使用for of 遍歷 Set 即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>forEach</p><ul><li>因Set沒有索引值，所以參數value與key是一樣的（如下範例</li><li>值得注意的是，若值為 undefined 還是可以被遍歷出來的</li><li><p>參考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach" title="Set.prototype.forEach()" target="_blank" rel="noopener">Set.prototype.forEach()</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span> , <span class="literal">undefined</span>]);</span><br><span class="line">set.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 9 : 9</span></span><br><span class="line"><span class="comment">// undefined : undefined</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Set 除了過濾重複值，也可以很容易的實現 聯集（Union）、交集（Intersect）和差集（Difference）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聯集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]);</span><br><span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)));</span><br><span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x)));</span><br><span class="line"><span class="comment">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="改變Set結構"><a href="#改變Set結構" class="headerlink" title="改變Set結構"></a>改變Set結構</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].map(<span class="function"><span class="params">val</span> =&gt;</span> val * <span class="number">2</span>));</span><br><span class="line"><span class="comment">// set的值是2, 4, 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">Array</span>.from(set, val =&gt; val * <span class="number">2</span>));</span><br><span class="line"><span class="comment">// set的值是2, 4, 6</span></span><br></pre></td></tr></table></figure><hr><h3 id="WeekSet"><a href="#WeekSet" class="headerlink" title="WeekSet"></a>WeekSet</h3><ul><li><code>WeekSet</code> 是對象值的集合，每個對象值只能出現一次</li><li><p>只能儲存對象引用，不能像Set一樣存放值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">WeakSet</span>([iterable]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>(a);</span><br><span class="line"><span class="comment">// WeakSet &#123;[1, 2], [3, 4]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>(b);</span><br><span class="line"><span class="comment">// Uncaught TypeError: Invalid value used in weak set(…)</span></span><br></pre></td></tr></table></figure></li><li><p>add</p><ul><li>替 WeekSet 新增一個對象 <code>Weakly link an object into the set</code></li></ul></li><li><p>delete</p><ul><li>清除 WeekSet 的某個對象 <code>Remove a link to an object from the set</code></li></ul></li><li><p>has</p><ul><li>檢查 WeekSet 是否存在某個對象 <code>Check if an object has already been linked to the set</code></li></ul></li><li><p>clear <code>ps.MDN上把clear方法列為瀏覽器不支援項目了</code></p><ul><li>清除 WeekSet 『所有』對象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">window</span> = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">ws.add(<span class="built_in">window</span>);</span><br><span class="line">ws.add(obj);</span><br><span class="line"></span><br><span class="line">ws.has(<span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line">ws.has(foo);    <span class="comment">// false foo不是ws成員</span></span><br><span class="line"></span><br><span class="line">ws.delete(<span class="built_in">window</span>);</span><br><span class="line">ws.has(<span class="built_in">window</span>);    <span class="comment">// false, window 已經被移除</span></span><br></pre></td></tr></table></figure></li><li><p>WeekSet沒有Size屬性</p></li><li><p>WeekSet沒有辦法遍歷它的值，因為內部資料隨時可能消失，遍歷機制無法保證資料存在。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws.size <span class="comment">// undefined</span></span><br><span class="line">ws.forEach <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://stackoverflow.com/questions/30556078/ecmascript-6-what-is-weakset-for" title="what is WeakSet for?" target="_blank" rel="noopener">what is WeakSet for?</a></p></li></ul><hr><h4 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h4><ul><li><p>Set</p><ol><li>也可是迭代</li><li>建構子也可以接受一個可迭代物件傳入</li><li>具有size屬性</li><li>值可以是任意值或物件參考</li><li>值必須唯一</li><li>中 NaN === NaN</li><li>沒有鍵/值，它是一維的，可視為陣列，只是值不會重複</li></ol></li><li><p>WeekSet</p><ol><li>無法進行迭代,但建構子可接受一個可迭代物件傳入</li></ol></li></ul><hr><h4 id="參考資料來源"><a href="#參考資料來源" class="headerlink" title="參考資料來源"></a>參考資料來源</h4><ol><li><a href="http://es6.ruanyifeng.com/#docs/set-map" title="Set 和 Map 数据结构" target="_blank" rel="noopener">Set 和 Map 数据结构</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Set" title="MDN - Set" target="_blank" rel="noopener">MDN - Set</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet" title="MDN - WeekSet" target="_blank" rel="noopener">MDN - WeekSet</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Set&quot;&gt;&lt;a href=&quot;#Set&quot; class=&quot;headerlink&quot; title=&quot;Set&quot;&gt;&lt;/a&gt;Set&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以儲存任何類型的唯一值，不論型別或物件&lt;/p&gt;
&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
      <category term="javascript" scheme="https://runkids.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day04] Array Cardio Day1</title>
    <link href="https://runkids.github.io/js30days/2018010401/"/>
    <id>https://runkids.github.io/js30days/2018010401/</id>
    <published>2018-01-04T13:33:55.000Z</published>
    <updated>2018-06-29T01:06:17.020Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：Array方法操作"><a href="#實做：Array方法操作" class="headerlink" title="實做：Array方法操作"></a>實做：Array方法操作</h5><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>Array方法操作：sort , map , filter ,reduce</li><li>Array.from 轉成陣列</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><p>請把程式碼貼到瀏覽器console查看結果</p><hr><p>順道提 console.table( );<br>在Chrome console 下看會變成下圖這樣<br><a href="https://mdn.mozillademos.org/files/8567/console-table-array.png" target="_blank" rel="noopener"><img src="https://mdn.mozillademos.org/files/8567/console-table-array.png" alt=""></a><br>變成表格格式了！Cool ~</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inventors = [</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Albert"</span>, <span class="attr">last</span>: <span class="string">"Einstein"</span>, <span class="attr">year</span>: <span class="number">1879</span>, <span class="attr">passed</span>: <span class="number">1955</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Isaac"</span>, <span class="attr">last</span>: <span class="string">"Newton"</span>, <span class="attr">year</span>: <span class="number">1643</span>, <span class="attr">passed</span>: <span class="number">1727</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Galileo"</span>, <span class="attr">last</span>: <span class="string">"Galilei"</span>, <span class="attr">year</span>: <span class="number">1564</span>, <span class="attr">passed</span>: <span class="number">1642</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Marie"</span>, <span class="attr">last</span>: <span class="string">"Curie"</span>, <span class="attr">year</span>: <span class="number">1867</span>, <span class="attr">passed</span>: <span class="number">1934</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Johannes"</span>, <span class="attr">last</span>: <span class="string">"Kepler"</span>, <span class="attr">year</span>: <span class="number">1571</span>, <span class="attr">passed</span>: <span class="number">1630</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Nicolaus"</span>, <span class="attr">last</span>: <span class="string">"Copernicus"</span>, <span class="attr">year</span>: <span class="number">1473</span>, <span class="attr">passed</span>: <span class="number">1543</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Max"</span>, <span class="attr">last</span>: <span class="string">"Planck"</span>, <span class="attr">year</span>: <span class="number">1858</span>, <span class="attr">passed</span>: <span class="number">1947</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Katherine"</span>, <span class="attr">last</span>: <span class="string">"Blodgett"</span>, <span class="attr">year</span>: <span class="number">1898</span>, <span class="attr">passed</span>: <span class="number">1979</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Ada"</span>, <span class="attr">last</span>: <span class="string">"Lovelace"</span>, <span class="attr">year</span>: <span class="number">1815</span>, <span class="attr">passed</span>: <span class="number">1852</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Sarah E."</span>, <span class="attr">last</span>: <span class="string">"Goode"</span>, <span class="attr">year</span>: <span class="number">1855</span>, <span class="attr">passed</span>: <span class="number">1905</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Lise"</span>, <span class="attr">last</span>: <span class="string">"Meitner"</span>, <span class="attr">year</span>: <span class="number">1878</span>, <span class="attr">passed</span>: <span class="number">1968</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">"Hanna"</span>, <span class="attr">last</span>: <span class="string">"Hammarström"</span>, <span class="attr">year</span>: <span class="number">1829</span>, <span class="attr">passed</span>: <span class="number">1909</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" title="filter " target="_blank" rel="noopener">filter </a><br>callback function 返回 true 即保留該元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fifteen = inventors.filter(</span><br><span class="line"><span class="comment">//如果出生年份介於1500~1599就保留</span></span><br><span class="line">    inventor =&gt; inventor.year &gt;= <span class="number">1500</span> &amp;&amp; inventor.year &lt; <span class="number">1600</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.table(fifteen);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" title="map" target="_blank" rel="noopener">map</a><br>callback function 處理後返回新陣列</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fullName = inventors.map(</span><br><span class="line">    inventor =&gt; inventor.first + <span class="string">' '</span> + inventor.last</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.table(fullName);</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" title="sort" target="_blank" rel="noopener">sort</a><br>預設依照Unicode進行排序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">2</span>]; </span><br><span class="line">scores.sort(); </span><br><span class="line"><span class="comment">// [1, 10, 2, 21] ，10 會在 2 之前要特別注意</span></span><br></pre></td></tr></table></figure><p>也可以自訂compare function，若a&gt;b 大於0，b會排在a之前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ordered = inventors.sort( <span class="function">(<span class="params">a, b</span>) =&gt;</span> (a &gt; b) ? <span class="number">1</span> : <span class="number">-1</span> );</span><br><span class="line"><span class="built_in">console</span>.table(ordered);</span><br></pre></td></tr></table></figure><p>排序活的年數lol</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inventors.sort( <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.passed - a.year - (b.passed - b.year) );</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" title="reduce" target="_blank" rel="noopener">reduce</a><br>由左到右將所有元素做累加，並返回最終值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preVal, lastVal, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preVal + lastVal;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>後面可以多一個參數當作初始值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preVal, lastVal, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preVal + lastVal;</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>統計重複的值有幾個</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [<span class="string">'car'</span>, <span class="string">'car'</span>, <span class="string">'truck'</span>, <span class="string">'truck'</span>, <span class="string">'bike'</span>, <span class="string">'walk'</span>, <span class="string">'car'</span>, <span class="string">'van'</span>, <span class="string">'bike'</span>, <span class="string">'walk'</span>, <span class="string">'car'</span>, <span class="string">'van'</span>, <span class="string">'car'</span>, <span class="string">'truck'</span> ];</span><br><span class="line">  <span class="keyword">const</span> reduce = data.reduce( <span class="function">(<span class="params">obj, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>( !obj[item]  ) &#123; <span class="comment">//若預設物件沒有就新增一個，並給初始為0</span></span><br><span class="line">      obj[item] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      obj[item]++;</span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;, &#123;&#125;); <span class="comment">//預設給一個空物件</span></span><br><span class="line">  <span class="built_in">console</span>.log(reduce);</span><br></pre></td></tr></table></figure><hr><p>最後結合 map 與 filter 在下面網站找出所有含有 de 的字眼<br><a href="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris" title="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aElement = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.mw-category a'</span>))</span><br><span class="line">  <span class="keyword">let</span> list = aElement.map(<span class="function"><span class="params">item</span> =&gt;</span> item.textContent)</span><br><span class="line">                      .filter(<span class="function"><span class="params">item</span> =&gt;</span> item.includes(<span class="string">'de'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure><p>因<code>querySelectorAll()</code>不是陣列所以沒有Array方法，可以使用Array.from轉成陣列格式，<br>或者使用ES6<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" title="解構語法" target="_blank" rel="noopener">解構語法</a>,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...document.querySelectorAll(<span class="string">'.mw-category a'</span>)]; <span class="comment">//注意要加上[ ]</span></span><br></pre></td></tr></table></figure><p>ES5用法則是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.mw-category a'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：Array方法操作&quot;&gt;&lt;a href=&quot;#實做：Array方法操作&quot; class=&quot;headerlink&quot; title=&quot;實做：Array方法
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day03] Playing with CSS Variables and JS</title>
    <link href="https://runkids.github.io/js30days/2018010101/"/>
    <id>https://runkids.github.io/js30days/2018010101/</id>
    <published>2018-01-01T09:27:59.000Z</published>
    <updated>2018-06-29T01:42:38.768Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：使用JS控制CSS來改變圖片效果"><a href="#實做：使用JS控制CSS來改變圖片效果" class="headerlink" title="實做：使用JS控制CSS來改變圖片效果"></a>實做：使用JS控制CSS來改變圖片效果</h5><iframe height="800" scrolling="no" title="JS30Days03" src="//codepen.io/runkids/embed/mpwbXx/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/mpwbXx/" target="_blank" rel="noopener">JS30Days03</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>建立 CSS 全域變數 :root （IE 和 Edge 目前不支援）</li><li>利用 JS 動態改變 CSS 變數</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><ul><li>定義CSS全域變數 <code>:root{ --變數名稱 : 變數值 }</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用變數 <code>var( --變數名稱 )</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--base);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用data attribute 定義單位 ex. px ，如果值是顏色就不需要</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"spacing"</span> <span class="attr">min</span>=<span class="string">"10"</span> <span class="attr">max</span>=<span class="string">"200"</span> <span class="attr">value</span>=<span class="string">"10"</span> <span class="attr">data-sizing</span>=<span class="string">"px"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"base"</span> <span class="attr">value</span>=<span class="string">"#ffc600"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 JS 取得 data attribute 值，即我們定義的單位</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> suffix = <span class="keyword">this</span>.dataset.sizing || <span class="string">' '</span> ; <span class="comment">//取得自定義屬性data-sizing，若沒有就給空值</span></span><br></pre></td></tr></table></figure><ul><li>使用 JS 動態改變 CSS 變數值</li></ul><p>利用 <code>document.documentElement.style.setProperty( &#39;--變數名稱&#39;, &#39;變數值&#39; )</code> 動態改變 CSS，並且加上單位</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">`--<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>,<span class="keyword">this</span>.value+suffix);</span><br></pre></td></tr></table></figure><h5 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h5><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root" title=":root" target="_blank" rel="noopener">:root</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter" title="CSS濾鏡" target="_blank" rel="noopener">CSS濾鏡</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：使用JS控制CSS來改變圖片效果&quot;&gt;&lt;a href=&quot;#實做：使用JS控制CSS來改變圖片效果&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue實做圖片預覽</title>
    <link href="https://runkids.github.io/vue/2017123101/"/>
    <id>https://runkids.github.io/vue/2017123101/</id>
    <published>2017-12-31T11:01:25.000Z</published>
    <updated>2018-06-29T01:43:34.246Z</updated>
    
    <content type="html"><![CDATA[<h4 id="單圖檔預覽"><a href="#單圖檔預覽" class="headerlink" title="單圖檔預覽"></a>單圖檔預覽</h4><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"fileSelected"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span>  <span class="attr">v-if</span>=<span class="string">"image"</span> <span class="attr">:src</span>=<span class="string">"image"</span> <span class="attr">width</span>=<span class="string">"300"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>這裡我們要顯示一個上傳檔案的按鈕，並且在img tag顯示選擇的圖片</li></ul><p>Javascript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fileSelected(event)&#123;</span><br><span class="line">      <span class="keyword">const</span> file = event.target.files.item(<span class="number">0</span>); <span class="comment">//取得File物件</span></span><br><span class="line">      <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader(); <span class="comment">//建立FileReader 監聽 Load 事件</span></span><br><span class="line">      reader.addEventListener(<span class="string">'load'</span>,<span class="keyword">this</span>.imageLoader);</span><br><span class="line">      reader.readAsDataURL(file);</span><br><span class="line"> &#125;</span><br><span class="line"> imageLoader(event)&#123;</span><br><span class="line">      <span class="keyword">this</span>.image=event.target.result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>在Vue實體中，於methods建立fileSelected方法，當檔案按鈕觸發change事件時，會取得file物件</li><li>此時利用FileReader監聽 Load事件，取得圖檔被轉成Base64格式的URL</li><li>再把URL 綁到 img 的src 即可</li></ul><p><a href="https://codepen.io/runkids/pen/opWawW" title="單檔預覽Demo" target="_blank" rel="noopener">單檔預覽Demo</a></p><hr><h4 id="多圖檔預覽"><a href="#多圖檔預覽" class="headerlink" title="多圖檔預覽"></a>多圖檔預覽</h4><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"fileSelected"</span> <span class="attr">multiple</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"image.src"</span> <span class="attr">:height</span>=<span class="string">"image.height"</span> <span class="attr">v-for</span>=<span class="string">"image in images"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>這裡我們要顯示一個上傳檔案的按鈕，並加上multiple</li><li>img Tag 則使用 v-for 的方式呈現</li></ul><p>Javascript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fileSelected(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.images=[];</span><br><span class="line">    <span class="keyword">const</span> files = event.target.files; <span class="comment">//取得File物件</span></span><br><span class="line">    [].forEach.call(files,<span class="keyword">this</span>.fileReader);</span><br><span class="line">&#125;,</span><br><span class="line">fileReader(file) &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader(); <span class="comment">//建立FileReader 監聽 Load 事件</span></span><br><span class="line">    reader.addEventListener(<span class="string">"load"</span>, <span class="keyword">this</span>.createImage);</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">&#125;,</span><br><span class="line">createImage(event) &#123;</span><br><span class="line">    <span class="keyword">const</span> file = event.target;</span><br><span class="line">    <span class="keyword">const</span> image = &#123;</span><br><span class="line">        height : <span class="number">100</span>,</span><br><span class="line">        title : file.name,</span><br><span class="line">        src : file.result</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.images.push(image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多檔作法其實與單檔相似，利用forEach個別取得圖檔的 Base64 RUL</li><li>createImage 方法會把每一個URL存放到data 中的 images陣列</li></ul><p><a href="https://goo.gl/JkxGke" title="單檔預覽Demo" target="_blank" rel="noopener">多檔預覽Demo</a></p><hr><h4 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readAsDataURL" title="FileReader.readAsDataURL()" target="_blank" rel="noopener">FileReader.readAsDataURL()</a><br><a href="https://runkids.github.io/javascript/2017122801/" title="理解Javascrpit[].forEach.call()">理解Javascrpit[].forEach.call()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;單圖檔預覽&quot;&gt;&lt;a href=&quot;#單圖檔預覽&quot; class=&quot;headerlink&quot; title=&quot;單圖檔預覽&quot;&gt;&lt;/a&gt;單圖檔預覽&lt;/h4&gt;&lt;p&gt;HTML：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="Vue" scheme="https://runkids.github.io/categories/vue/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="https://runkids.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day02] CSS + JS Clock</title>
    <link href="https://runkids.github.io/js30days/2017123001/"/>
    <id>https://runkids.github.io/js30days/2017123001/</id>
    <published>2017-12-30T04:31:08.000Z</published>
    <updated>2018-06-29T01:44:45.960Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：使用CSS-JS-做出時鐘"><a href="#實做：使用CSS-JS-做出時鐘" class="headerlink" title="實做：使用CSS + JS 做出時鐘"></a>實做：使用CSS + JS 做出時鐘</h5><iframe height="400" scrolling="no" title="JS30Days02" src="//codepen.io/runkids/embed/JMNWrP/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/JMNWrP/" target="_blank" rel="noopener">JS30Days02</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>CSS 旋轉效果</li><li>獲取時間換算角度</li><li>利用 javascript 控制 CSS</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><ul><li>會用到以下CSS</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform-oragin</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>()</span><br><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.05s</span></span><br><span class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(<span class="selector-tag">x</span>, <span class="selector-tag">x</span>, <span class="selector-tag">x</span>, <span class="selector-tag">x</span>)</span><br></pre></td></tr></table></figure><ol><li>transform-oragin : 調整指針初始位置</li><li>transform: rotate() ：指針角度控制</li><li>transition ：指針跳動的過渡效果</li><li>transition-timing-function : 呈現指針會有滴答滴答的效果</li></ol><ul><li>利用 setInterval 每秒更新指針角度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>, 1000);</span></span><br></pre></td></tr></table></figure><ul><li>獲取時間並換算角度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> sec = now.getSeconds();</span><br><span class="line"><span class="keyword">let</span> secDeg = (sec/<span class="number">60</span>) * <span class="number">360</span>;</span><br></pre></td></tr></table></figure><ul><li>操作CSS</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> secHand = <span class="built_in">document</span>.querySelector(<span class="string">".sec-hand"</span>);</span><br><span class="line">secHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;secDeg+<span class="number">90</span>&#125;</span>deg) scale(0.9, 0.5)`</span>;</span><br></pre></td></tr></table></figure><h5 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h5><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin" title="transform-origin" target="_blank" rel="noopener">transform-origin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：使用CSS-JS-做出時鐘&quot;&gt;&lt;a href=&quot;#實做：使用CSS-JS-做出時鐘&quot; class=&quot;headerlink&quot; title=&quot;實做
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[筆記][JS30天-Day01] JavaScript Drum Kit</title>
    <link href="https://runkids.github.io/js30days/2017122901/"/>
    <id>https://runkids.github.io/js30days/2017122901/</id>
    <published>2017-12-29T04:06:03.000Z</published>
    <updated>2018-06-29T01:46:18.519Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://goo.gl/ChS3iv" alt="JS_30_Days"></p><h5 id="實做：使用鍵盤按鈕觸發樂器效果的頁面"><a href="#實做：使用鍵盤按鈕觸發樂器效果的頁面" class="headerlink" title="實做：使用鍵盤按鈕觸發樂器效果的頁面"></a>實做：使用鍵盤按鈕觸發樂器效果的頁面</h5><iframe height="265" scrolling="no" title="JS30Days01" src="//codepen.io/runkids/embed/qprGvx/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/runkids/pen/qprGvx/" target="_blank" rel="noopener">JS30Days01</a> by Hung Wei Heng (<a href="https://codepen.io/runkids" target="_blank" rel="noopener">@runkids</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><hr><h5 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h5><ul><li>自定義 HTML 資料屬性</li><li>使用鍵盤觸發 audio</li><li>利用 javascript 控制 CSS</li></ul><hr><h5 id="解說"><a href="#解說" class="headerlink" title="解說"></a>解說</h5><ul><li>為了按下鍵盤後，能夠對應要發出的音效，必須在每個元素上綁定 keyCode，利用自定義資料屬性的方式在div和audio綁定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data-key 是自訂的屬性</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">'65'</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">'65'</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加入監聽事件：keydown ，並使用querySelector 來獲取被按下的元素與keyCode</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keydown 事件會把鍵盤的訊息傳入，包含keyCode , keyName等等</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">`div[data-key="<span class="subst">$&#123;event.keyCode&#125;</span>"]`</span>);</span><br></pre></td></tr></table></figure><ul><li>播放音效後綁定新的class給被按下的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> audio = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>); </span><br><span class="line">audio.currentTime = <span class="number">0</span>;  <span class="comment">//確保可以連續發出音效，加上這個即可</span></span><br><span class="line"></span><br><span class="line">＄(<span class="string">'div'</span>).addClass(<span class="string">'playing'</span>);  <span class="comment">//使用jQery可以這樣綁定Class給元素</span></span><br><span class="line"> <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>).classList.add(<span class="string">'palying'</span>); <span class="comment">//原生JS寫法</span></span><br></pre></td></tr></table></figure><ul><li>最後音效結束後，必須讓效果恢復原狀：</li></ul><p>當我們按下元素後，元素會被放大，完成後就可以利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/transitionend" title="transitionened" target="_blank" rel="noopener">transitionened</a> 事件恢復原狀！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key.addEventListener(<span class="string">"transitionend"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(e.propertyName!==<span class="string">'transform'</span>) <span class="keyword">return</span>;</span><br><span class="line">      key.classList.remove(<span class="string">'playing'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h5><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" title="補充" target="_blank" rel="noopener">transitionened 補充</a><br><a href="https://pjchender.blogspot.tw/2017/01/html-5-data-attribute.html" title="data-* Attributes" target="_blank" rel="noopener">什麼是自定義tag？data-* Attributes</a><br><a href="http://keycode.info/" title="這個網站可以查看鍵盤按鍵對應的keyCode" target="_blank" rel="noopener">這裡可以查看鍵盤按鍵對應的keyCode</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://goo.gl/ChS3iv&quot; alt=&quot;JS_30_Days&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;實做：使用鍵盤按鈕觸發樂器效果的頁面&quot;&gt;&lt;a href=&quot;#實做：使用鍵盤按鈕觸發樂器效果的頁面&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="JS30天學習筆記系列" scheme="https://runkids.github.io/categories/js30days/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>理解Javascrpit[].forEach.call()</title>
    <link href="https://runkids.github.io/javascript/2017122801/"/>
    <id>https://runkids.github.io/javascript/2017122801/</id>
    <published>2017-12-28T09:36:59.000Z</published>
    <updated>2018-06-29T01:46:51.166Z</updated>
    
    <content type="html"><![CDATA[<p>今天在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readAsDataURL" title="developer.mozilla.org" target="_blank" rel="noopener">developer.mozilla.org</a>看到一個有趣的寫法，故在此記錄一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].forEach.call(files, readAndPreview);</span><br></pre></td></tr></table></figure><p>這段寫法其實是下面的簡潔寫法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(files, readAndPreview);</span><br></pre></td></tr></table></figure><ul><li>files 可以是DOM元素， ex.  document.querySelectorAll(“.imgFrame”)</li><li>利用call把空陣列的this指向files，如此一來files就能跑forEach了</li><li>而後面的call back function , 可以取得陣列的值及index，可以做額外處理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[].forEach.call([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">": "</span> + item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 0: "a"</span></span><br><span class="line"><span class="comment">// 1: "b"</span></span><br><span class="line"><span class="comment">// 2: "c"</span></span><br><span class="line"><span class="comment">// 3: "d"</span></span><br></pre></td></tr></table></figure><hr><h4 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h4><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/call" title="call" target="_blank" rel="noopener">Function.prototype.call</a><br><a href="https://stackoverflow.com/questions/16053357/what-does-foreach-call-do-in-javascript" title="What does [].forEach.call() do in JavaScript?" target="_blank" rel="noopener">What does [].forEach.call() do in JavaScript?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readAsDataURL&quot; title=&quot;developer.mozilla.org&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="javascript" scheme="https://runkids.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://runkids.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>VSCode無法更新最新版本</title>
    <link href="https://runkids.github.io/vscode/2017122701/"/>
    <id>https://runkids.github.io/vscode/2017122701/</id>
    <published>2017-12-27T13:10:30.000Z</published>
    <updated>2018-06-29T01:46:57.970Z</updated>
    
    <content type="html"><![CDATA[<p>今天要更新VSCode,結果跳出下面的訊息,然後就一直更新失敗！</p><p> <code>Could not create temporary directory ：權限被拒絕</code></p><p>解決辦法：必須更改VSCode目錄的權限，在終端機輸入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $USER:admin ~/Library/Caches/com.microsoft.VSCode</span><br><span class="line">sudo chown -R $USER:admin ~/Library/Caches/com.microsoft.VSCode.ShipIt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天要更新VSCode,結果跳出下面的訊息,然後就一直更新失敗！&lt;/p&gt;
&lt;p&gt; &lt;code&gt;Could not create temporary directory ：權限被拒絕&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解決辦法：必須更改VSCode目錄的權限，在終端機輸入：&lt;/
      
    
    </summary>
    
      <category term="VSCode" scheme="https://runkids.github.io/categories/vscode/"/>
    
    
      <category term="VSCode" scheme="https://runkids.github.io/tags/VSCode/"/>
    
  </entry>
  
</feed>
